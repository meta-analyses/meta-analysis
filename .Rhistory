raw_data[(is.na(raw_data$tot_personyrs)),]$mean_followup * raw_data[(is.na(raw_data$tot_personyrs)),]$n_baseline
raw_data[(is.na(raw_data$mean_followup)),]$mean_followup <-
raw_data[(is.na(raw_data$mean_followup)),]$tot_personyrs / raw_data[(is.na(raw_data$mean_followup)),]$n_baseline
raw_data$outcome <- trimws(raw_data$outcome)
raw_data$pa_domain_subgroup <- trimws(raw_data$pa_domain_subgroup)
raw_data$overall <- trimws(raw_data$overall)
raw_data$sex_subgroups <- trimws(raw_data$sex_subgroups)
raw_data$totalpersons <- as.numeric(raw_data$n_per_category)
raw_data$personyrs <- as.numeric(raw_data$person_years_per_category)
raw_data[raw_data$effect_measure == "RR",]$effect_measure <- "rr"
raw_data[raw_data$effect_measure == "HR",]$effect_measure <- "hr"
raw_data$type <- ""
#raw_data[raw_data$effect_measure == "or",]$type <- "ir" #no odds ratio
raw_data[raw_data$effect_measure == "rr",]$type <- "ir"
raw_data[raw_data$effect_measure == "hr",]$type <- "ci"
raw_data$type <- as.character(raw_data$type)
## RENAME columns
raw_data <- raw_data %>% rename(effect = most_adj_effect, cases = cases_per_category,
uci_effect = most_adj_uci, lci_effect = most_adj_lci) %>%
mutate(cases = as.numeric(cases), uci_effect = as.numeric(uci_effect), lci_effect = as.numeric(lci_effect))
# ## FOR SENSITIVITY ANALYSIS
#raw_data$dose <- raw_data$Final.Harmonised.exposure..MMET.hrs.wk...FOR.SENSITIVITY.ANALYSIS
## FOR THE CURRENT ASSUMPTIONS
raw_data$dose <- round(raw_data$m_met_h_wk, 2)
#raw_data$Final.Harmonised.exposure..MMET.hrs.wk. <- NULL
raw_data$RR <- raw_data$effect
raw_data <- subset(raw_data, select = c(ref_number, first_author, outcome, outcome_type, sex_subgroups, type, n_baseline, totalpersons, tot_personyrs, personyrs,
mean_followup, dose, RR, effect, effect_measure, lci_effect, uci_effect, cases, overall, pa_domain_subgroup))
## Populate missing totalpersons and personyrs
for (i in unique(raw_data$ref_number)){
raw_data[!is.na(raw_data$n_baseline) & raw_data$ref_number == i & (is.na(raw_data$totalpersons)) & !(is.na(raw_data$personyrs)) & !(is.na(raw_data$tot_personyrs)),]$totalpersons <-
round(raw_data[!is.na(raw_data$n_baseline) & raw_data$ref_number == i & (is.na(raw_data$totalpersons)) & !(is.na(raw_data$personyrs)) & !(is.na(raw_data$tot_personyrs)),]$personyrs /
sum(raw_data[!is.na(raw_data$n_baseline) & raw_data$ref_number == i & (is.na(raw_data$totalpersons)) & !(is.na(raw_data$personyrs)) & !(is.na(raw_data$tot_personyrs)),]$tot_personyrs)  *
raw_data[!is.na(raw_data$n_baseline) & raw_data$ref_number == i & (is.na(raw_data$totalpersons)) & !(is.na(raw_data$personyrs)) & !(is.na(raw_data$tot_personyrs)),]$n_baseline)
raw_data[!is.na(raw_data$n_baseline) & raw_data$ref_number == i & (is.na(raw_data$totalpersons)) & (is.na(raw_data$personyrs)) & !(is.na(raw_data$cases)),]$personyrs <-
round(raw_data[!is.na(raw_data$n_baseline) & raw_data$ref_number == i & (is.na(raw_data$totalpersons)) & (is.na(raw_data$personyrs)) & !(is.na(raw_data$cases)),]$cases /
sum(raw_data[!is.na(raw_data$n_baseline) & raw_data$ref_number == i & (is.na(raw_data$totalpersons)) & (is.na(raw_data$personyrs)) & !(is.na(raw_data$cases)),]$cases)  *
raw_data[!is.na(raw_data$n_baseline) & raw_data$ref_number == i & (is.na(raw_data$totalpersons)) & (is.na(raw_data$personyrs)) & !(is.na(raw_data$cases)),]$tot_personyrs)
}
# Replace 'Heart failure' with 'heart failure'
#raw_data[raw_data$outcome == 'Heart failure',]$outcome <- 'heart failure'
# Replace "CVD" with "Cardiovascular Disease"
#raw_data[raw_data$outcome == "CVD",]$outcome <- "Cardiovascular Disease"
# Replace "CHD" with "Coronary Heart Disease"
#raw_data[raw_data$outcome == "CHD",]$outcome <- "Coronary Heart Disease"
#
raw_data$outcome <- stringi::stri_trans_totitle(raw_data$outcome, opts_brkiter = stringi::stri_opts_brkiter(type = "sentence"))
# Identify unique outcomes
uoutcome <- data.frame(outcome = as.character(unique(raw_data$outcome)))
uoutcome$outcome <- as.character(uoutcome$outcome)
uoutcome$outcome <- stringi::stri_trans_totitle(uoutcome$outcome, opts_brkiter = stringi::stri_opts_brkiter(type = "sentence"))
# Sort
uoutcome$outcome <- sort(uoutcome$outcome)
# Remove the blank outcome
uoutcome <- dplyr::filter(uoutcome, outcome != "")
# All-cause mortality
# Cardiovascular diseases
# Coronary heart disease
# Stroke
# Breast cancer
# Colon cancer
# Endometrial cancer
# Lung cancer
# Total cancer
#uoutcome$outcome <- uoutcome[c(1, 3, 5, 9, 2, 4, 6, 8, 10, 7),]
source("script/all-functions.R")
source("script/filter_studies.R")
total_population <- T
# Set fixed last knot to 75th of person years
local_last_knot <- 0.75
if (total_population){
for (i in 1:nrow(uoutcome)){
# Loop through all three outcome types
for (local_outcome_type in c('Fatal', 'Non-fatal', 'Both')){
# Ignore (3) All-cause mortality
if (i %in% c(3) & local_outcome_type == 'Fatal')
next
# Ignore (3) All-cause mortality
# Ignore (18) Prostate cancer
# Ignore (19) Rectum cancer
# Ignore (20) Stroke
if (i %in% c(3, 18, 19, 20) & local_outcome_type == 'Both')
next
# Select output directory according to outcome type
if (local_outcome_type == 'Fatal'){
dir_name <- 'mortality'
}
else if (local_outcome_type == 'Non-fatal'){
dir_name <- 'incidence'
}
else{
dir_name <- 'both'
}
# Print basic info re outcome, outcome type and index
cat("Total Population - Outcome: ", uoutcome$outcome[i], " , outcome type ",
dir_name, " and index ", i, "\n")
# Subset according to outcome, domain and outcome type
acmfdata <- subset(raw_data_tp_ltpa, outcome == uoutcome$outcome[i] & pa_domain_subgroup == local_pa_domain_subgroup & outcome_type == local_outcome_type)
# Add additional 'fatal' studies that had no 'both' types
if (local_outcome_type == 'Both'){
# Subset fatal types
add_fdata <- subset(raw_data_tp_ltpa, outcome == uoutcome$outcome[i] & pa_domain_subgroup == local_pa_domain_subgroup & outcome_type == 'Fatal')
# ONLY add those studies that have no 'both' studies
add_fdata <- subset(add_fdata, !id %in% acmfdata$id)
# Add additional rows
if (nrow(add_fdata) > 0){
acmfdata <- rbind(acmfdata, add_fdata)
}
}
# Keep only those studies with n_baseline greater than 10k
acmfdata <- subset(acmfdata, n_baseline >= 10000)
# Use default covariance method
local_cov_method <- T
if (nrow(acmfdata) > 0){
# Fill missing values by inferring to useful columns
acmfdata <- getMissingVariables(acmfdata, infertotalpersons = T, kcases = T)
# Remove all studies with mandatory info
acmfdata <- subset(acmfdata, !((effect == "hr" & (is.na(personyrs) | personyrs == 0) ) |
(effect != "hr" & (is.na(totalpersons | totalpersons == 0) ) ) ))
# Select subset of columns
acmfdata <- subset(acmfdata, select = c(id, ref_number, first_author, effect_measure, outcome_type, type, totalpersons, personyrs, dose, RR, logrr, cases, uci_effect, lci_effect, se))
# Get last knot based on 75% of person years
last_knot <- get_last_knot(acmfdata, dose_pert = local_last_knot , personyrs_pert = local_last_knot)
last_knot <- last_knot[2]
if (nrow(acmfdata) > 0){
dataset <- acmfdata
# Get quantiles (0th, 37.5th and 75th)
q <- quantile(dataset$dose, c(0, last_knot / 2, last_knot))
if (!is.null(dataset)){
dataset$personyrs <- round(dataset$personyrs)
group_by(dataset, id) %>% select(dose, se) %>%
summarise(min = min(dose), max = max(dose), ref = dose[is.na(se)])
pa <- acmfdata
# NOTE TO MATT/LEANDRO
# This removes all studies with repeating rows such as studies with both sex and ethnicity entries
# Won't need it if we remove all such rows from the dataset
# Identify all studies with repeating IDs
local_filter <- dataset %>% group_by(id) %>% summarise(c = sum(is.na(se))) %>% filter(c > 1) %>% dplyr::select(id)
# Remove all such studies altogether - which is a temp fix
ld <- NULL
if (nrow(local_filter) > 0){
ld <- dataset %>% filter(!id %in% local_filter)
}else{
ld <- dataset
}
# By default run the analysis with Hamling method to approximate covariance
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = T, minQuantile = 0, maxQuantile = last_knot, lout = 1000)
# If it fails, use the default by Greenland and Longnecker (gl)
if (is.null(res) || is.na(res)){
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = F, minQuantile = 0, maxQuantile = last_knot, lout = 1000)
}
# If this too fails, increase maxQuantile to 90th percent
if (is.null(res) || is.na(res)){
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = F, minQuantile = 0, maxQuantile = 0.9, lout = 1000)
}
# Save results as data frame
dataset2 <- data.frame(res)
# Assign names
colnames(dataset2) <- c("dose","RR", "lb", "ub")
# Create plot title
plotTitle <- paste0( uoutcome$outcome[i] ,  " - ", simpleCap(dir_name), " - Total Population")
plotTitle <-  paste0(simpleCap(plotTitle), ' \nNumber of entries: ',
length(unique(acmfdata$id)),
' \nNumber of people: ' , round(sum(acmfdata$totalpersons, na.rm = T)))#, " ", local_last_knot)
# Create plot
p <- ggplot() +
geom_line(data = dataset, aes(dose, RR, col = factor(id), group = ref_number)) +
geom_point(data = dataset, aes(dose, RR, col = factor(id), label = first_author), size = 4 * (dataset$personyrs - min(dataset$personyrs))/diff(range(dataset$personyrs))) +
# geom_dl(data = dataset, aes(dose, RR, label = ref_number), method=list(
#   cex=0.8,
#   directlabels::polygon.method(
#     "top",
#     offset.cm=0.5,
#     padding.cm=0.05)))  +
geom_line(data = subset(dataset2, dose < as.numeric(q[3])), aes(x = dose, y = RR)) +
geom_line(data = subset(dataset2, dose >= as.numeric(q[3])), aes(x = dose, y = RR), linetype = "dashed") +
geom_ribbon(data = subset(dataset2, dose < as.numeric(q[3])), aes(x = dose, ymin=`lb`,ymax=`ub`), alpha = 0.25) +
geom_ribbon(data = subset(dataset2, dose >= as.numeric(q[3])), aes(x = dose, ymin=`lb`,ymax=`ub`), alpha = 0.10) +
geom_vline(xintercept= q, linetype="dotted", alpha = 0.6) +
scale_x_continuous(expand = c(0, 0),
breaks = seq(from = 0, to = 80, by = 10)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(from = 0, to = max(dataset2$ub), by = 0.2),
limits = c(0, NA)) +
theme(legend.position="none",
plot.title = element_text(hjust = 0.5)) +
xlab("\nMarginal MET hours per week\n") +
ylab("\nRelative Risk\n") +
labs(title = paste(plotTitle))
# Print plot
print(p)
# Save plot
ggsave(paste0('plots/', dir_name, '/', uoutcome$outcome[i], "-", dir_name, ".png"), height=5, width=10, units='in', dpi=600, scale = 1)
}
}
}
}
}
}
library(tidyverse)
source("script/init.R")
### Remove studies with less than 40k for all-cause, or 10k for the rest outcomes
#raw_data <- subset(raw_data, (outcome == "all-cause mortality" & n_baseline >= 40000 ) |
#    (outcome != "all-cause mortality" & n_baseline >= 10000 ))
raw_data_tp_ltpa <- subset(raw_data, pa_domain_subgroup == "LTPA")
for (i in 1:nrow(uoutcome)){
dat <- subset(raw_data_tp_ltpa, outcome == uoutcome$outcome[i])
for (j in 1:length(unique(dat$ref_number))){
dat1 <- subset(dat, ref_number == (unique(dat$ref_number))[j])
uoverall <- unique(dat1$overall)
usexgroups <- unique(dat1$sex_subgroups)
if (length(usexgroups) > 2 && length(uoverall) > 1){
# Remove gender specific from total_population
raw_data_tp_ltpa <- subset(raw_data_tp_ltpa, (ref_number == unique(dat1$ref_number) & !sex_subgroups %in% c(1,2)) | (ref_number != unique(dat1$ref_number)))
# cat(uoutcome$outcome[i], " - ", unique(dat1$ref_number), " - ", unique(dat1$overall), " - ", unique(dat1$sex_subgroups), "\n")
}
}
}
raw_data_gsp_ltpa <- subset(raw_data, pa_domain_subgroup == "LTPA" & (sex_subgroups %in% c(1,2)))
for (i in 1:nrow(uoutcome)){
if (!uoutcome$outcome[i] %in% c('Breast cancer','Endometrial cancer')){
dat <- subset(raw_data_gsp_ltpa, outcome == uoutcome$outcome[i])
uid <- unique(dat$ref_number)
for (j in 1:length(uid)){
dat1 <- subset(dat, ref_number == uid[j])
usexgroups <- unique(dat1$sex_subgroups)
if (length(usexgroups) == 1){
# Remove single gender specific studies
raw_data_gsp_ltpa <- subset(raw_data_gsp_ltpa, (ref_number != uid[j]))
# cat("gsp ",uoutcome$outcome[i], " - ", unique(dat1$ref_number), " - ", unique(dat1$overall), " - ", unique(dat1$sex_subgroups), "\n")
}
}
}
}
## Create ref_number for men and women subgroups
## for total population
raw_data_tp_ltpa[raw_data_tp_ltpa$overall != 1 & raw_data_tp_ltpa$sex_subgroups == 1,]$ref_number <- paste(raw_data_tp_ltpa[raw_data_tp_ltpa$overall != 1 & raw_data_tp_ltpa$sex_subgroups == 1,]$ref_number, "-1")
raw_data_tp_ltpa[raw_data_tp_ltpa$overall != 1 & raw_data_tp_ltpa$sex_subgroups == 2,]$ref_number <- paste(raw_data_tp_ltpa[raw_data_tp_ltpa$overall != 1 & raw_data_tp_ltpa$sex_subgroups == 2,]$ref_number, "-2")
# Create ID column
raw_data_tp_ltpa$id <- as.integer(as.factor(raw_data_tp_ltpa$ref_number))
raw_data_tp_ltpa <- plyr::arrange(raw_data_tp_ltpa, outcome)
raw_data_gsp_ltpa[raw_data_gsp_ltpa$sex_subgroups == 1,]$ref_number <- paste0(raw_data_gsp_ltpa[raw_data_gsp_ltpa$sex_subgroups == 1,]$ref_number, "-1")
raw_data_gsp_ltpa[raw_data_gsp_ltpa$sex_subgroups == 2,]$ref_number <- paste0(raw_data_gsp_ltpa[raw_data_gsp_ltpa$sex_subgroups == 2,]$ref_number, "-2")
# Create ID column
raw_data_gsp_ltpa$id <- as.integer(as.factor(raw_data_gsp_ltpa$ref_number))
raw_data_gsp_ltpa <- plyr::arrange(raw_data_gsp_ltpa, outcome)
source("script/filter_studies.R")
total_population <- T
# Set fixed last knot to 75th of person years
local_last_knot <- 0.75
if (total_population){
for (i in 1:nrow(uoutcome)){
# Loop through all three outcome types
for (local_outcome_type in c('Fatal', 'Non-fatal', 'Both')){
# Ignore (3) All-cause mortality
if (i %in% c(3) & local_outcome_type == 'Fatal')
next
# Ignore (3) All-cause mortality
# Ignore (18) Prostate cancer
# Ignore (19) Rectum cancer
# Ignore (20) Stroke
if (i %in% c(3, 18, 19, 20) & local_outcome_type == 'Both')
next
# Select output directory according to outcome type
if (local_outcome_type == 'Fatal'){
dir_name <- 'mortality'
}
else if (local_outcome_type == 'Non-fatal'){
dir_name <- 'incidence'
}
else{
dir_name <- 'both'
}
# Print basic info re outcome, outcome type and index
cat("Total Population - Outcome: ", uoutcome$outcome[i], " , outcome type ",
dir_name, " and index ", i, "\n")
# Subset according to outcome, domain and outcome type
acmfdata <- subset(raw_data_tp_ltpa, outcome == uoutcome$outcome[i] & pa_domain_subgroup == local_pa_domain_subgroup & outcome_type == local_outcome_type)
# Add additional 'fatal' studies that had no 'both' types
if (local_outcome_type == 'Both'){
# Subset fatal types
add_fdata <- subset(raw_data_tp_ltpa, outcome == uoutcome$outcome[i] & pa_domain_subgroup == local_pa_domain_subgroup & outcome_type == 'Fatal')
# ONLY add those studies that have no 'both' studies
add_fdata <- subset(add_fdata, !id %in% acmfdata$id)
# Add additional rows
if (nrow(add_fdata) > 0){
acmfdata <- rbind(acmfdata, add_fdata)
}
}
# Keep only those studies with n_baseline greater than 10k
acmfdata <- subset(acmfdata, n_baseline >= 10000)
# Use default covariance method
local_cov_method <- T
if (nrow(acmfdata) > 0){
# Fill missing values by inferring to useful columns
acmfdata <- getMissingVariables(acmfdata, infertotalpersons = T, kcases = T)
# Remove all studies with mandatory info
acmfdata <- subset(acmfdata, !((effect == "hr" & (is.na(personyrs) | personyrs == 0) ) |
(effect != "hr" & (is.na(totalpersons | totalpersons == 0) ) ) ))
# Select subset of columns
acmfdata <- subset(acmfdata, select = c(id, ref_number, first_author, effect_measure, outcome_type, type, totalpersons, personyrs, dose, RR, logrr, cases, uci_effect, lci_effect, se))
# Get last knot based on 75% of person years
last_knot <- get_last_knot(acmfdata, dose_pert = local_last_knot , personyrs_pert = local_last_knot)
last_knot <- last_knot[2]
if (nrow(acmfdata) > 0){
dataset <- acmfdata
# Get quantiles (0th, 37.5th and 75th)
q <- quantile(dataset$dose, c(0, last_knot / 2, last_knot))
if (!is.null(dataset)){
dataset$personyrs <- round(dataset$personyrs)
group_by(dataset, id) %>% select(dose, se) %>%
summarise(min = min(dose), max = max(dose), ref = dose[is.na(se)])
pa <- acmfdata
# NOTE TO MATT/LEANDRO
# This removes all studies with repeating rows such as studies with both sex and ethnicity entries
# Won't need it if we remove all such rows from the dataset
# Identify all studies with repeating IDs
local_filter <- dataset %>% group_by(id) %>% summarise(c = sum(is.na(se))) %>% filter(c > 1) %>% dplyr::select(id)
# Remove all such studies altogether - which is a temp fix
ld <- NULL
if (nrow(local_filter) > 0){
ld <- dataset %>% filter(!id %in% local_filter)
}else{
ld <- dataset
}
# By default run the analysis with Hamling method to approximate covariance
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = T, minQuantile = 0, maxQuantile = last_knot, lout = 1000)
# If it fails, use the default by Greenland and Longnecker (gl)
if (is.null(res) || is.na(res)){
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = F, minQuantile = 0, maxQuantile = last_knot, lout = 1000)
}
# If this too fails, increase maxQuantile to 90th percent
if (is.null(res) || is.na(res)){
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = F, minQuantile = 0, maxQuantile = 0.9, lout = 1000)
}
# Save results as data frame
dataset2 <- data.frame(res)
# Assign names
colnames(dataset2) <- c("dose","RR", "lb", "ub")
# Create plot title
plotTitle <- paste0( uoutcome$outcome[i] ,  " - ", simpleCap(dir_name), " - Total Population")
plotTitle <-  paste0(simpleCap(plotTitle), ' \nNumber of entries: ',
length(unique(acmfdata$id)),
' \nNumber of people: ' , round(sum(acmfdata$totalpersons, na.rm = T)))#, " ", local_last_knot)
# Create plot
p <- ggplot() +
geom_line(data = dataset, aes(dose, RR, col = factor(id), group = ref_number)) +
geom_point(data = dataset, aes(dose, RR, col = factor(id), label = first_author), size = 4 * (dataset$personyrs - min(dataset$personyrs))/diff(range(dataset$personyrs))) +
# geom_dl(data = dataset, aes(dose, RR, label = ref_number), method=list(
#   cex=0.8,
#   directlabels::polygon.method(
#     "top",
#     offset.cm=0.5,
#     padding.cm=0.05)))  +
geom_line(data = subset(dataset2, dose < as.numeric(q[3])), aes(x = dose, y = RR)) +
geom_line(data = subset(dataset2, dose >= as.numeric(q[3])), aes(x = dose, y = RR), linetype = "dashed") +
geom_ribbon(data = subset(dataset2, dose < as.numeric(q[3])), aes(x = dose, ymin=`lb`,ymax=`ub`), alpha = 0.25) +
geom_ribbon(data = subset(dataset2, dose >= as.numeric(q[3])), aes(x = dose, ymin=`lb`,ymax=`ub`), alpha = 0.10) +
geom_vline(xintercept= q, linetype="dotted", alpha = 0.6) +
scale_x_continuous(expand = c(0, 0),
breaks = seq(from = 0, to = 80, by = 10)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(from = 0, to = max(dataset2$ub), by = 0.2),
limits = c(0, NA)) +
theme(legend.position="none",
plot.title = element_text(hjust = 0.5)) +
xlab("\nMarginal MET hours per week\n") +
ylab("\nRelative Risk\n") +
labs(title = paste(plotTitle))
# Print plot
print(p)
# Save plot
ggsave(paste0('plots/', dir_name, '/', uoutcome$outcome[i], "-", dir_name, ".png"), height=5, width=10, units='in', dpi=600, scale = 1)
}
}
}
}
}
}
source("script/filter_studies.R")
total_population <- T
# Set fixed last knot to 75th of person years
local_last_knot <- 0.75
if (total_population){
for (i in 1:nrow(uoutcome)){
# Loop through all three outcome types
for (local_outcome_type in c('Fatal', 'Non-fatal', 'Both')){
# Ignore (3) All-cause mortality
if (i %in% c(3) & local_outcome_type == 'Fatal')
next
# Ignore (3) All-cause mortality
# Ignore (18) Prostate cancer
# Ignore (19) Rectum cancer
# Ignore (20) Stroke
if (i %in% c(3, 18, 19, 20) & local_outcome_type == 'Both')
next
# Select output directory according to outcome type
if (local_outcome_type == 'Fatal'){
dir_name <- 'mortality'
}
else if (local_outcome_type == 'Non-fatal'){
dir_name <- 'incidence'
}
else{
dir_name <- 'both'
}
# Print basic info re outcome, outcome type and index
cat("Total Population - Outcome: ", uoutcome$outcome[i], " , outcome type ",
dir_name, " and index ", i, "\n")
# Subset according to outcome, domain and outcome type
acmfdata <- subset(raw_data_tp_ltpa, outcome == uoutcome$outcome[i] & pa_domain_subgroup == local_pa_domain_subgroup & outcome_type == local_outcome_type)
# Add additional 'fatal' studies that had no 'both' types
if (local_outcome_type == 'Both'){
# Subset fatal types
add_fdata <- subset(raw_data_tp_ltpa, outcome == uoutcome$outcome[i] & pa_domain_subgroup == local_pa_domain_subgroup & outcome_type == 'Fatal')
# ONLY add those studies that have no 'both' studies
add_fdata <- subset(add_fdata, !id %in% acmfdata$id)
# Add additional rows
if (nrow(add_fdata) > 0){
acmfdata <- rbind(acmfdata, add_fdata)
}
}
# Keep only those studies with n_baseline greater than 10k
acmfdata <- subset(acmfdata, n_baseline >= 10000)
# Use default covariance method
local_cov_method <- T
if (nrow(acmfdata) > 0){
# Fill missing values by inferring to useful columns
acmfdata <- getMissingVariables(acmfdata, infertotalpersons = T, kcases = T)
# Remove all studies with mandatory info
acmfdata <- subset(acmfdata, !((effect == "hr" & (is.na(personyrs) | personyrs == 0) ) |
(effect != "hr" & (is.na(totalpersons | totalpersons == 0) ) ) ))
# Select subset of columns
acmfdata <- subset(acmfdata, select = c(id, ref_number, first_author, effect_measure, outcome_type, type, totalpersons, personyrs, dose, RR, logrr, cases, uci_effect, lci_effect, se))
# Get last knot based on 75% of person years
last_knot <- get_last_knot(acmfdata, dose_pert = local_last_knot , personyrs_pert = local_last_knot)
last_knot <- last_knot[2]
if (nrow(acmfdata) > 0){
dataset <- acmfdata
# Get quantiles (0th, 37.5th and 75th)
q <- quantile(dataset$dose, c(0, last_knot / 2, last_knot))
if (!is.null(dataset)){
dataset$personyrs <- round(dataset$personyrs)
group_by(dataset, id) %>% select(dose, se) %>%
summarise(min = min(dose), max = max(dose), ref = dose[is.na(se)])
pa <- acmfdata
# NOTE TO MATT/LEANDRO
# This removes all studies with repeating rows such as studies with both sex and ethnicity entries
# Won't need it if we remove all such rows from the dataset
# Identify all studies with repeating IDs
local_filter <- dataset %>% group_by(id) %>% summarise(c = sum(is.na(se))) %>% filter(c > 1) %>% dplyr::select(id)
# Remove all such studies altogether - which is a temp fix
ld <- NULL
if (nrow(local_filter) > 0){
ld <- dataset %>% filter(!id %in% local_filter)
}else{
ld <- dataset
}
# By default run the analysis with Hamling method to approximate covariance
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = T, minQuantile = 0, maxQuantile = last_knot, lout = 1000)
# If it fails, use the default by Greenland and Longnecker (gl)
if (is.null(res) || is.na(res)){
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = F, minQuantile = 0, maxQuantile = last_knot, lout = 1000)
}
# If this too fails, increase maxQuantile to 90th percent
if (is.null(res) || is.na(res)){
res <- metaAnalysis(ld, ptitle = "", returnval = T, covMethed = F, minQuantile = 0, maxQuantile = 0.9, lout = 1000)
}
# Save results as data frame
dataset2 <- data.frame(res)
# Assign names
colnames(dataset2) <- c("dose","RR", "lb", "ub")
# Create plot title
plotTitle <- paste0( uoutcome$outcome[i] ,  " - ", simpleCap(dir_name), " - Total Population")
plotTitle <-  paste0(simpleCap(plotTitle), ' \nNumber of entries: ',
length(unique(acmfdata$id)),
' \nNumber of people: ' , round(sum(acmfdata$totalpersons, na.rm = T)))#, " ", local_last_knot)
# Create plot
p <- ggplot() +
geom_line(data = dataset, aes(dose, RR, col = factor(id), group = ref_number)) +
geom_point(data = dataset, aes(dose, RR, col = factor(id), label = first_author), size = 4 * (dataset$personyrs - min(dataset$personyrs))/diff(range(dataset$personyrs))) +
# geom_dl(data = dataset, aes(dose, RR, label = ref_number), method=list(
#   cex=0.8,
#   directlabels::polygon.method(
#     "top",
#     offset.cm=0.5,
#     padding.cm=0.05)))  +
geom_line(data = subset(dataset2, dose < as.numeric(q[3])), aes(x = dose, y = RR)) +
geom_line(data = subset(dataset2, dose >= as.numeric(q[3])), aes(x = dose, y = RR), linetype = "dashed") +
geom_ribbon(data = subset(dataset2, dose < as.numeric(q[3])), aes(x = dose, ymin=`lb`,ymax=`ub`), alpha = 0.25) +
geom_ribbon(data = subset(dataset2, dose >= as.numeric(q[3])), aes(x = dose, ymin=`lb`,ymax=`ub`), alpha = 0.10) +
geom_vline(xintercept= q, linetype="dotted", alpha = 0.6) +
scale_x_continuous(expand = c(0, 0),
breaks = seq(from = 0, to = 80, by = 10)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(from = 0, to = max(dataset2$ub), by = 0.2),
limits = c(0, NA)) +
theme(legend.position="none",
plot.title = element_text(hjust = 0.5)) +
xlab("\nMarginal MET hours per week\n") +
ylab("\nRelative Risk\n") +
labs(title = paste(plotTitle))
# Print plot
print(p)
# Save plot
ggsave(paste0('plots/', dir_name, '/', uoutcome$outcome[i], "-", dir_name, ".png"), height=5, width=10, units='in', dpi=600, scale = 1)
}
}
}
}
}
}
